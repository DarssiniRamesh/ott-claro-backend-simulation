{"is_source_file": true, "format": "TypeScript", "description": "This file defines a User repository and related interfaces for managing user data in a MongoDB database using Mongoose.", "external_files": ["./BaseRepository"], "external_methods": ["BaseRepository#create", "BaseRepository#findOne", "BaseRepository#update", "BaseRepository#find"], "published": ["IUser", "IUserRepository", "UserRepository"], "classes": [{"name": "UserRepository", "description": "Implements the IUserRepository interface to perform CRUD operations on user data."}], "methods": [{"name": "async findByEmail(email: string): Promise<IUser | null> { findByEmail", "description": "Finds a user by their email address, returning a promise that resolves to the user or null.", "scope": "UserRepository", "scopeKind": "class"}, {"name": "async findByUsername(username: string): Promise<IUser | null> { findByUsername", "description": "Finds a user by their username, returning a promise that resolves to the user or null.", "scope": "UserRepository", "scopeKind": "class"}, {"name": "async updateLastLogin(id: string): Promise<IUser | null> { updateLastLogin", "description": "Updates the last login time of a user identified by their ID.", "scope": "UserRepository", "scopeKind": "class"}, {"name": "async findActiveUsers(): Promise<IUser[]> { findActiveUsers", "description": "Retrieves all users who are currently active.", "scope": "UserRepository", "scopeKind": "class"}, {"name": "async create(item: Partial<IUser>): Promise<IUser> { create", "description": "Overrides the create method to ensure the email is stored in lowercase.", "scope": "UserRepository", "scopeKind": "class"}, {"name": "constructor(model: Model<IUser>) { constructor", "scope": "UserRepository", "scopeKind": "class", "description": "unavailable"}, {"name": "findActiveUsers(): Promise<IUser[]>; findActiveUsers", "scope": "IUserRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "findByEmail(email: string): Promise<IUser | null>; findByEmail", "scope": "IUserRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "findByUsername(username: string): Promise<IUser | null>; findByUsername", "scope": "IUserRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "updateLastLogin(id: string): Promise<IUser | null>; updateLastLogin", "scope": "IUserRepository", "scopeKind": "interface", "description": "unavailable"}], "calls": ["super.create", "this.findOne", "this.update", "this.find"], "search-terms": ["UserRepository", "IUser", "IUserRepository", "findByEmail", "findByUsername"], "state": 2, "file_id": 40, "knowledge_revision": 228, "git_revision": "", "ctags": [{"_type": "tag", "name": "IUser", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^export interface IUser extends Document {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "IUserRepository", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^export interface IUserRepository extends IBaseRepository<IUser> {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "UserRepository", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^export class UserRepository extends BaseRepository<IUser> implements IUserRepository {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  constructor(model: Model<IUser>) {$/", "language": "TypeScript", "kind": "method", "scope": "UserRepository", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  async create(item: Partial<IUser>): Promise<IUser> {$/", "language": "TypeScript", "kind": "method", "scope": "UserRepository", "scopeKind": "class"}, {"_type": "tag", "name": "deviceId", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  deviceId?: string;$/", "language": "TypeScript", "kind": "property", "scope": "IUser", "scopeKind": "interface"}, {"_type": "tag", "name": "email", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  email: string;$/", "language": "TypeScript", "kind": "property", "scope": "IUser", "scopeKind": "interface"}, {"_type": "tag", "name": "findActiveUsers", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  async findActiveUsers(): Promise<IUser[]> {$/", "language": "TypeScript", "kind": "method", "scope": "UserRepository", "scopeKind": "class"}, {"_type": "tag", "name": "findActiveUsers", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  findActiveUsers(): Promise<IUser[]>;$/", "language": "TypeScript", "kind": "method", "scope": "IUserRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "findByEmail", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  async findByEmail(email: string): Promise<IUser | null> {$/", "language": "TypeScript", "kind": "method", "scope": "UserRepository", "scopeKind": "class"}, {"_type": "tag", "name": "findByEmail", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  findByEmail(email: string): Promise<IUser | null>;$/", "language": "TypeScript", "kind": "method", "scope": "IUserRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "findByUsername", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  async findByUsername(username: string): Promise<IUser | null> {$/", "language": "TypeScript", "kind": "method", "scope": "UserRepository", "scopeKind": "class"}, {"_type": "tag", "name": "findByUsername", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  findByUsername(username: string): Promise<IUser | null>;$/", "language": "TypeScript", "kind": "method", "scope": "IUserRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "isActive", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  isActive: boolean;$/", "language": "TypeScript", "kind": "property", "scope": "IUser", "scopeKind": "interface"}, {"_type": "tag", "name": "lastLogin", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  lastLogin?: Date;$/", "language": "TypeScript", "kind": "property", "scope": "IUser", "scopeKind": "interface"}, {"_type": "tag", "name": "password", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  password: string;$/", "language": "TypeScript", "kind": "property", "scope": "IUser", "scopeKind": "interface"}, {"_type": "tag", "name": "region", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  region?: string;$/", "language": "TypeScript", "kind": "property", "scope": "IUser", "scopeKind": "interface"}, {"_type": "tag", "name": "updateLastLogin", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  async updateLastLogin(id: string): Promise<IUser | null> {$/", "language": "TypeScript", "kind": "method", "scope": "UserRepository", "scopeKind": "class"}, {"_type": "tag", "name": "updateLastLogin", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  updateLastLogin(id: string): Promise<IUser | null>;$/", "language": "TypeScript", "kind": "method", "scope": "IUserRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "username", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "pattern": "/^  username: string;$/", "language": "TypeScript", "kind": "property", "scope": "IUser", "scopeKind": "interface"}], "filename": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/UserRepository.ts", "hash": "c8f58d79357576963ab82e53a30dbe29", "format-version": 4, "code-base-name": "default", "fields": [{"name": "export interface IUser extends Document {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "export interface IUserRepository extends IBaseRepository<IUser> {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "deviceId?: string;", "scope": "IUser", "scopeKind": "interface", "description": "unavailable"}, {"name": "email: string;", "scope": "IUser", "scopeKind": "interface", "description": "unavailable"}, {"name": "isActive: boolean;", "scope": "IUser", "scopeKind": "interface", "description": "unavailable"}, {"name": "lastLogin?: Date;", "scope": "IUser", "scopeKind": "interface", "description": "unavailable"}, {"name": "password: string;", "scope": "IUser", "scopeKind": "interface", "description": "unavailable"}, {"name": "region?: string;", "scope": "IUser", "scopeKind": "interface", "description": "unavailable"}, {"name": "username: string;", "scope": "IUser", "scopeKind": "interface", "description": "unavailable"}], "revision_history": [{"228": ""}]}