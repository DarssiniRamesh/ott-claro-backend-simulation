{"is_source_file": true, "format": "TypeScript", "description": "This file defines a base repository interface and its implementation for interacting with MongoDB models, including methods for creating, finding, updating, and deleting records while logging operations.", "external_files": ["mongoose", "winston"], "external_methods": ["winston.createLogger", "new winston.transports.File", "Model.create", "Model.findById", "Model.find", "Model.findOne", "Model.findByIdAndUpdate", "Model.findByIdAndDelete"], "published": ["BaseRepository"], "classes": [{"name": "BaseRepository", "description": "A generic base repository class for performing CRUD operations on MongoDB documents. It implements the IBaseRepository interface and utilizes mongoose for database operations."}], "methods": [{"name": "async create(item: Partial<T>): Promise<T> { create", "description": "Creates a new item in the database and logs the operation.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "async findById(id: string): Promise<T | null> { findById", "description": "Finds an item by its ID and logs the operation.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "async find(filter: FilterQuery<T>): Promise<T[]> { find", "description": "Finds multiple items based on a filter and logs the operation.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "async findOne(filter: FilterQuery<T>): Promise<T | null> { findOne", "description": "Finds a single item based on a filter and logs the operation.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "async update(id: string, item: UpdateQuery<T>): Promise<T | null> { update", "description": "Updates an item by its ID and logs the operation.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "async delete(id: string): Promise<boolean> { delete", "description": "Deletes an item by its ID and logs the operation.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "protected handleError(error: any): Error { handleError", "description": "Handles errors during database operations and returns a user-friendly error message.", "scope": "BaseRepository", "scopeKind": "class"}, {"name": "constructor( constructor", "scope": "BaseRepository", "scopeKind": "class", "description": "unavailable"}, {"name": "create(item: Partial<T>): Promise<T>; create", "scope": "IBaseRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "delete(id: string): Promise<boolean>; delete", "scope": "IBaseRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "find(filter: FilterQuery<T>): Promise<T[]>; find", "scope": "IBaseRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "findById(id: string): Promise<T | null>; findById", "scope": "IBaseRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "findOne(filter: FilterQuery<T>): Promise<T | null>; findOne", "scope": "IBaseRepository", "scopeKind": "interface", "description": "unavailable"}, {"name": "update(id: string, item: UpdateQuery<T>): Promise<T | null>; update", "scope": "IBaseRepository", "scopeKind": "interface", "description": "unavailable"}], "calls": ["this.model.save", "this.model.findById", "this.model.find", "this.model.findOne", "this.model.findByIdAndUpdate", "this.model.findByIdAndDelete"], "search-terms": ["BaseRepository", "CRUD operations", "mongoose", "TypeScript"], "state": 2, "file_id": 39, "knowledge_revision": 226, "git_revision": "", "ctags": [{"_type": "tag", "name": "BaseRepository", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^export class BaseRepository<T extends Document> implements IBaseRepository<T> {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "IBaseRepository", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^export interface IBaseRepository<T extends Document> {$/", "language": "TypeScript", "kind": "interface"}, {"_type": "tag", "name": "constructor", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  constructor($/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  async create(item: Partial<T>): Promise<T> {$/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  create(item: Partial<T>): Promise<T>;$/", "language": "TypeScript", "kind": "method", "scope": "IBaseRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "delete", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  async delete(id: string): Promise<boolean> {$/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "delete", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  delete(id: string): Promise<boolean>;$/", "language": "TypeScript", "kind": "method", "scope": "IBaseRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "find", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  async find(filter: FilterQuery<T>): Promise<T[]> {$/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "find", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  find(filter: FilterQuery<T>): Promise<T[]>;$/", "language": "TypeScript", "kind": "method", "scope": "IBaseRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "findById", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  async findById(id: string): Promise<T | null> {$/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "findById", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  findById(id: string): Promise<T | null>;$/", "language": "TypeScript", "kind": "method", "scope": "IBaseRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "findOne", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  async findOne(filter: FilterQuery<T>): Promise<T | null> {$/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "findOne", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  findOne(filter: FilterQuery<T>): Promise<T | null>;$/", "language": "TypeScript", "kind": "method", "scope": "IBaseRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "handleError", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  protected handleError(error: any): Error {$/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "item", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const item = await this.model.findById(id);$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.findById", "scopeKind": "method"}, {"_type": "tag", "name": "item", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const item = await this.model.findOne(filter);$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.findOne", "scopeKind": "method"}, {"_type": "tag", "name": "items", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const items = await this.model.find(filter);$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.find", "scopeKind": "method"}, {"_type": "tag", "name": "logger", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^const logger = winston.createLogger({$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "model", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^    protected readonly model: Model<T>,$/", "language": "TypeScript", "kind": "property", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "modelName", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^    private readonly modelName: string$/", "language": "TypeScript", "kind": "property", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "newItem", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const newItem = new this.model(item);$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.create", "scopeKind": "method"}, {"_type": "tag", "name": "result", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const result = await this.model.findByIdAndDelete(id);$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.delete", "scopeKind": "method"}, {"_type": "tag", "name": "savedItem", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const savedItem = await newItem.save();$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.create", "scopeKind": "method"}, {"_type": "tag", "name": "success", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const success = result !== null;$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.delete", "scopeKind": "method"}, {"_type": "tag", "name": "update", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  async update(id: string, item: UpdateQuery<T>): Promise<T | null> {$/", "language": "TypeScript", "kind": "method", "scope": "BaseRepository", "scopeKind": "class"}, {"_type": "tag", "name": "update", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^  update(id: string, item: UpdateQuery<T>): Promise<T | null>;$/", "language": "TypeScript", "kind": "method", "scope": "IBaseRepository", "scopeKind": "interface"}, {"_type": "tag", "name": "updatedItem", "path": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "pattern": "/^      const updatedItem = await this.model.findByIdAndUpdate(id, item, { new: true });$/", "language": "TypeScript", "kind": "constant", "scope": "BaseRepository.update", "scopeKind": "method"}], "filename": "/home/kavia/workspace/ott-claro-backend-simulation/src/repositories/BaseRepository.ts", "hash": "cb88b508080ac8d8e54183336d954547", "format-version": 4, "code-base-name": "default", "fields": [{"name": "export interface IBaseRepository<T extends Document> {", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "protected readonly model: Model<T>,", "scope": "BaseRepository", "scopeKind": "class", "description": "unavailable"}, {"name": "private readonly modelName: string", "scope": "BaseRepository", "scopeKind": "class", "description": "unavailable"}], "revision_history": [{"226": ""}]}